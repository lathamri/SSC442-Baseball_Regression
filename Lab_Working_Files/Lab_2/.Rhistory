install.packages('tidyverse')
library(ggplot2)
ggplot(diamonds, aes(cut)) + geom_bar()
clear
p + geom_point() + geom_smooth()
# generates gapminder data set
library(gapminder)
library(tidyverse)
library(ggplot2)
library(gapminder)
ggplot2::mpg
# typing geom_ will show all possible options of plots from ggplot2
# generates gapminder data set
library(gapminder)
head(gapminder)
# binds our variables of interest, gpdpercap and life exp
p = ggplot(data=gapminder,
mapping=aes(x=gdpPercap, y=lifeExp))
# generates a scatter plot for p
p + geom_point()
# binds our variables of interest, engine size and highway milage
q = ggplot(data=mpg,
mapping=aes(x=displ, y=hwy, color=class))
# generates a scatter plot for q
q + geom_point()
# It generates what you'd expect, as engine size increases you would
# likely see highway milages decrease as larger engines usually belong
# to larger vehicles which have lower highway milages.
# binds our variables of interest, class and drive type
r = ggplot(data=mpg,
mapping=aes(x=class, y=drv))
# generates a scatter plot of r
r + geom_point()
# This isn't a helpful plot because of the data bindings. It simply shows
# cars that have front, rear, or 4-wheel drive by class which doesn't tell
# us anyting intersting about our data. Perhaps a count of cars fitting into
# these categories would be more insightful.
q + geom_point()
p + geom_point() + geom_smooth()
?geom_smooth()
q + geom_point()
p = ggplot(data=gapminder,
mapping=aes(x=gdpPercap, y=lifeExp))
# generates a scatter plot for p
p + geom_point()
# bin
library(tidyverse)
library(ggplot2)
ggplot2::mpg
# typing geom_ will show all possible options of plots from ggplot2
# generates gapminder data set
library(gapminder)
head(gapminder)
p = ggplot(data=gapminder,
mapping=aes(x=gdpPercap, y=lifeExp))
# generates a scatter plot for p
p + geom_point()
p = ggplot(data=gapminder,
mapping=aes(x=gdpPercap, y=lifeExp))
View(p)
p + geom_point()
p + geom_point()
p + geom_point()
q = ggplot(data=mpg,
mapping=aes(x=displ, y=hwy, color=class))
# generates a scatter plot for q
q + geom_point()
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
summary(ameslist)
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = FALSE,
sep = ",")
summary(ameslist)
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
urlfile = 'https://raw.githubusercontent.com/MSUDataAnalytics/SSC442/master/Labs/data/bank.csv'
bank = read.csv(url(urlfile))
names(bank)
# full_mpg_model = lm(mpg ~ wt + year + cyl + disp + hp + acc, data = autompg)
full_bank_model = lm(balance ~ ., data = bank)
summary(full_bank_model)
clear
clean
clc()
clc
clear()
?read.table
# Get some info on the data
names(ameslist)
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
(ameslist)
# Tells us the data is stored as lists instead of a data frame, something to care for later
typeof(ameslist)
# Perhaps we want to make some analysis of the garage type as a predictor for price because of the typically
# bad weather in Ames
unique(ameslist$GarageType)
# Perhaps we want to make some analysis of the garage type as a predictor for price because of the typically
# bad weather in Ames
unique(ameslist$GarageType)
# First we assign values to the garage types of 0 or 1
GarageTemp = model.matrix( ~ GarageType - 1, data=ameslist$GarageType )
# First we assign values to the garage types of 0 or 1
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
View(GarageTemp)
# Now we stitch this back together using cbind
ameslist <- cbind(ameslist, GarageTemp)
# Lets see why this doesn't work, perhaps it's the NA values in garagetemp being dropped?
summary(GarageTemp)
# Lets see why this doesn't work, perhaps it's the NA values in garagetemp being dropped?
sum(is.na(ameslist$GarageType))
current_options = options(na.action='na.pass')
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
ameslist <- cbind(ameslist, GarageTemp)
# Notice that the amount of NA values in GarageType is 81, and that 1379+81=1460 which is the number of rows
# we have in GarageType. So we must be dropping NA values when we make GarageTemp. Lets fix that below.
original_options = options()
original_options
ameslist$GarageOutside <- ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
unique(ameslist$GarageOutside)
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
summary(ameslist)
# Read in the data set with headers FALSE
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = FALSE,
sep = ",")
summary(ameslist)
# Notice how this clearly breaks the data by trying to force the headers to remain as part of the data. It
# forces R to structure all of this as vectors with no specific data type.
# Re-Read in the data with headers True
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
?read.table
# Get some info on the data
names(ameslist)
# Tells us the data is stored as lists instead of a data frame, something to care for later
typeof(ameslist)
# Perhaps we want to make some analysis of the garage type as a predictor for price because of the typically
# bad weather in Ames
unique(ameslist$GarageType)
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
# Now we stitch this back together using cbind
ameslist <- cbind(ameslist, GarageTemp)
# Lets see why this doesn't work, perhaps it's the NA values in garagetemp being dropped?
sum(is.na(ameslist$GarageType))
original_options = options()
# Write NA handling exception to keep NA rows for GarageType
current_options = options(na.action='na.pass')
# Build our matrix
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
# Create our cbind and update ameslist
ameslist <- cbind(ameslist, GarageTemp)
# Restore original options
original_options
ameslist$GarageOutside <- ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
unique(ameslist$GarageOutside)
View(ameslist)
# Restore original options
options(original_options)
# Create our cbind and update ameslist
ameslist <- cbind(ameslist, GarageTemp)
ameslist$GarageOutside <- ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
unique(ameslist$GarageOutside)
# Now we change our values again to indicate which of these garage types are outside
ameslist$GarageOutside <- ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
View(ameslist)
View(GarageTemp)
# Now we change our values again to indicate which of these garage types are outside
ameslist['GarageOutside']=0
ameslist$GarageOutside = ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
View(ameslist)
unique(ameslist$GarageOutside)
?ifelse
detach = ameslist$GarageTypeDetchd == 1
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
# Perhaps we want to make some analysis of the garage type as a predictor for price because of the typically
# bad weather in Ames
unique(ameslist$GarageType)
# First we assign values to the garage types of 0 or 1
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
original_options = options()
# Write NA handling exception to keep NA rows for GarageType
current_options = options(na.action='na.pass')
# Build our matrix
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
# Create our cbind and update ameslist
ameslist <- cbind(ameslist, GarageTemp)
# Restore original options
options(original_options)
# Now we change our values again to indicate which of these garage types are outside
ameslist['GarageOutside']=0
View(ameslist)
names(aameslist)
names(ameslist)
detach = ameslist$GarageTypeDetchd == 1
head(detach)
detach = ameslist$GarageTypeDetchd > 0
detach = ameslist$GarageTypeDetchd == 0
typeof(ameslist)
library (plyr)
df <- ldply (ameslist, data.frame)
View(df)
amescsv = read.csv("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv")
summary(amescsv)
typeof(amescsv)
ameslist <- as.ata.frame(read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ","))
ameslist <- as.data.frame(read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ","))
typeof(ameslist)
View(ameslist)
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
# First we assign values to the garage types of 0 or 1
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
original_options = options()
# Write NA handling exception to keep NA rows for GarageType
current_options = options(na.action='na.pass')
# Build our matrix
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
# Create our cbind and update ameslist
ameslist <- cbind(ameslist, GarageTemp)
# Restore original options
options(original_options)
View(ameslist)
ameslist$GarageOutside = ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
# First we assign values to the garage types of 0 or 1
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
original_options = options()
# Write NA handling exception to keep NA rows for GarageType
current_options = options(na.action='na.pass')
# Build our matrix
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
# Create our cbind and update ameslist
ameslist <- cbind(ameslist, GarageTemp)
# Restore original options
options(original_options)
ameslist$GarageOutside = ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
ameslist$GarageOutside = ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
# First we assign values to the garage types of 0 or 1
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
original_options = options()
# Write NA handling exception to keep NA rows for GarageType
current_options = options(na.action='na.pass')
# Build our matrix
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
# Create our cbind and update ameslist
ameslist <- cbind(ameslist, GarageTemp)
# Restore original options
options(original_options)
ameslist$GarageOutside = ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
View(GarageTemp)
ameslist$GarageOutside = ifelse(GarageTemp$GarageTypeDetchd == 1 | GarageTemp$GarageTypeCarPort == 1, 1, 0)
View(GarageTemp)
ameslist$GarageOutside = ifelse(GarageTemp$ameslist$GarageTypeDetchd == 1 | GarageTemp$ameslist$GarageTypeCarPort == 1, 1, 0)
ameslist$GarageOutside = ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
# Now we change our values again to indicate which of these garage types are outside
ameslist['GarageOutside']=0
ameslist$GarageOutside = ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
ameslist$GarageOutside <- ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
## Exercise 1
# Prune the data to only integers
lapply(ameslist, class)
Ames = ameslist[where(class=integer)]
[which(class=integer)]
Ames = ameslist[which(class=integer)]
Ames = ameslist[class==integer]
Ames = ameslist[class==integer]
Ames = ameslist[class=='integer']
## Exercise 1
# Prune the data to only integers
typeof(lapply(ameslist, class))
Ames = ameslist[x==integer]
## Exercise 1
# Prune the data to only integers
x = lapply(ameslist, class)
Ames = ameslist[x==integer]
Ames = ameslist[x=='integer']
View(Ames)
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
# First we assign values to the garage types of 0 or 1
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
original_options = options()
# Write NA handling exception to keep NA rows for GarageType
current_options = options(na.action='na.pass')
# Build our matrix
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
# Create our cbind and update ameslist
ameslist <- cbind(ameslist, GarageTemp)
# Restore original options
options(original_options)
## Exercise 1
# Prune the data to only integers
int_type = lapply(ameslist, class)
Ames = ameslist[int_type=='integer']
# Drop some columns that don't have meaning
Ames$MSSubClass = NULL
library(tidyverse)
library(ggplot2)
library(scales)
# 2. Produce a scatter plot of 12 variables
Scatter_Ames = pairs(Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)])
# 2. Produce a scatter plot of 12 variables
Scatter_Ames = pairs(Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)], pch = 19)
# 2. Produce a scatter plot of 12 variables
Scatter_Ames = pairs(Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)], pch = 19, lower.panel = NULL)
# 2. Produce a scatter plot of 12 variables
Scatter_Ames = pairs(Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)], pch = 5, lower.panel = NULL)
?pairs
my_cols <- c("#00AFBB", "#E7B800", "#FC4E07")
Scatter_Ames = pairs(Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)], pch = 19,
col = my_cols[Ames$SalePrice],
lower.panel = NULL)
Scatter_Ames = pairs(Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)], pch = 19,
lower.panel = NULL)
?cor
for (i in Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)]){
cor(i, Ames$SalePrice)
}
for (i in Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)]){
print(cor(i, Ames$SalePrice))
}
for (i in Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)]){
print(i, cor(i, Ames$SalePrice))
}
for (i in Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)]){
print(names(i), cor(i, Ames$SalePrice))
}
for (i in Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)]){
print(colnames(i), cor(i, Ames$SalePrice))
}
for (i in Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)]){
print(cor(i, Ames$SalePrice))
}
for (i in Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)]){
print(colnames(Ames) ,cor(i, Ames$SalePrice))
}
for (i in c(3,4,5,12,13,14,19,20,23,26,32,33)){
print(colnames(Ames[i]) ,cor(Ames[i], Ames$SalePrice))
}
for (i in c(3,4,5,12,13,14,19,20,23,26,32,33)){
print(paste(colnames(Ames[i]), cor(Ames[i], Ames$SalePrice)))
}
for (i in c(3,4,5,12,13,14,19,20,23,26,32,33)){
print(paste(colnames(Ames[i]), "has correlation of ", cor(Ames[i], Ames$SalePrice), "to SalePrice."))
}
for (i in c(3,4,5,12,13,14,19,20,23,26,32,33)){
print(paste(colnames(Ames[i]), "has correlation of ", round(cor(Ames[i], Ames$SalePrice), digits=3), "to SalePrice."))
}
cor(Ames[c(3,4,5,12,13,14,19,20,23,26,32,33)])
cor(Ames[ ,c(3,4,5,12,13,14,19,20,23,26,32,33)])
round(cor(Ames[ ,c(3,4,5,12,13,14,19,20,23,26,32,33)]), digits=3)
cor_matrix = round(cor(Ames[ ,c(3,4,5,12,13,14,19,20,23,26,32,33)]), digits=3)
p = ggplot(data=Ames,
mapping = aes(x=Ames$GrLivArea, y=Ames$SalePrice))
p + geom_abline() + geom_point()
p  + geom_point() + geom_abline()
setwd(/Users/rileylatham/Downloads/SSC442/Lab_Working_Files/Lab_2)
setwd('/Users/rileylatham/Downloads/SSC442/Lab_Working_Files/Lab_2')
library(tidyverse)
library(ggplot2)
library(scales)
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
# First we assign values to the garage types of 0 or 1
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
View(GarageTemp)
original_options = options()
# Write NA handling exception to keep NA rows for GarageType
current_options = options(na.action='na.pass')
# Build our matrix
GarageTemp = model.matrix( ~ ameslist$GarageType - 1, data=ameslist$GarageType )
# Create our cbind and update ameslist
ameslist <- cbind(ameslist, GarageTemp)
# Restore original options
options(original_options)
# Now we see the Bind gives us no trouble and we can change the options back so they don't mess with
# any of our later code.
unique(GarageTemp)
## This doesn't work, asking Bushong Tuesday what's up with it
ameslist$GarageOutside <- ifelse(ameslist$GarageTypeDetchd == 1 | ameslist$GarageTypeCarPort == 1, 1, 0)
unique(ameslist$GarageOutside)
## Exercise 1
# 1. Prune the data to only integers
# Generates a list of all data types for each of the columns in ameslist
int_type = lapply(ameslist, class)
# Generates a dataframe from ames data with all integer type data
Ames = ameslist[int_type=='integer']
# Drop some columns that don't have meaning
Ames$MSSubClass = NULL
Scatter_Ames = pairs(Ames[,c(3,4,5,12,13,14,19,20,23,26,32,33)], pch = 19,
lower.panel = NULL)
# 3. Produce a correlation matrix of the chosen variables
# Shows correlations for our chosen variables to SalesPrice
cor_matrix = round(cor(Ames[ ,c(3,4,5,12,13,14,19,20,23,26,32,33)]), digits=3)
p = ggplot(data=Ames,
mapping = aes(x=Ames$GrLivArea, y=Ames$SalePrice))
# abline doesn't wanna work for me, look for fixes if you can
p  + geom_point() + geom_abline()
?abline
# abline doesn't wanna work for me, look for fixes if you can
p  + geom_abline()
geom_point() +
# abline doesn't wanna work for me, look for fixes if you can
p  + geom_point() + geom_abline()
p = ggplot(data=Ames,
mapping = aes(x=Ames$GrLivArea, y=Ames$SalePrice))
p  + geom_point() + geom_abline()
# abline doesn't wanna work for me, look for fixes if you can
p  + geom_point() + geom_abline(color='Red')
# abline doesn't wanna work for me, look for fixes if you can
p + geom_abline(color='Red')  + geom_point()
ggplot(data = Ames,
aes(x=Ames$GrLivArea, y=Ames$SalePrice)) +
geom_point() +
geom_abline(color="Red")
attach(Ames)
lm.fit = lm(SalePrice ~ GrLivArea)
lm.fit
View(Ames)
# 3. Produce a correlation matrix of the chosen variables
# Shows correlations for our chosen variables to SalesPrice
cor_matrix = round(cor(Ames[ ,c(3,4,5,12,13,14,19,20,23,26,32,33)]), digits=3)
View(cor_matrix)
Scatter_Ames = pairs(Ames[,c(3,4,12,13,14,16,19,20,23,26,32,33)], pch = 19,
lower.panel = NULL)
# 3. Produce a correlation matrix of the chosen variables
# Shows correlations for our chosen variables to SalesPrice
cor_matrix = round(cor(Ames[,c(3,4,12,13,14,16,19,20,23,26,32,33)]), digits=3)
plot(lm.fit)
lm.fit = lm(SalePrice ~ GrLivArea + LotArea)
plot(lm.fit)
summary(lm.fit)
lm.fit = lm(SalePrice ~ GrLivArea)
summary(lm.fit)
# Plotting with more informed models
lm.fit = lm(SalePrice ~ GrLivArea + LotArea)
summary(lm.fit)

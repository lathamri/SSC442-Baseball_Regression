View(cars)
str(cars)
dim(cars)
dim(cars)
nrow(cars)
ncol(cars)
?cars
plot(dist ~ speed, data = cars,
xlab = "Speed (in Miles Per Hour)",
ylab = "Stopping Distance (in Feet)",
main = "Stopping Distance vs Speed",
pch  = 20,
cex  = 2,
col  = "grey")
lm(cars[speed], cars[dist])
lm(cars['speed'], cars['dist'])
plot(dist ~ speed, data = cars,
xlab = "Speed (in Miles Per Hour)",
ylab = "Stopping Distance (in Feet)",
main = "Stopping Distance vs Speed",
pch  = 20,
cex  = 2,
col  = "grey")
underfit_model = lm(dist ~ 1, data = cars)
abline(underfit_model, lwd = 3, col = "darkorange")
overfit_model = lm(dist ~ poly(speed, 18), data = cars)
x = seq(-10, 50, length.out = 200)
plot(dist ~ speed, data = cars,
xlab = "Speed (in Miles Per Hour)",
ylab = "Stopping Distance (in Feet)",
main = "Stopping Distance vs Speed",
pch  = 20,
cex  = 2,
col  = "grey")
lines(x, predict(overfit_model, data.frame(speed = x)), lwd = 2, col = "darkorange")
overfit_model = lm(dist ~ poly(speed, 18), data = cars)
x = seq(-10, 50, length.out = 200)
lines(x, predict(overfit_model, data.frame(speed = x)), lwd = 2, col = "darkorange")
stop_dist_model = lm(dist ~ speed, data = cars)
abline(stop_dist_model, lwd = 3, col = "darkorange")
plot(dist ~ speed, data = cars,
xlab = "Speed (in Miles Per Hour)",
ylab = "Stopping Distance (in Feet)",
main = "Stopping Distance vs Speed",
pch  = 20,
cex  = 2,
col  = "grey")
stop_dist_model = lm(dist ~ speed, data = cars)
abline(stop_dist_model, lwd = 3, col = "darkorange")
x = cars$speed
y = cars$dist
Sxy = sum((x - mean(x)) * (y - mean(y)))
Sxx = sum((x - mean(x)) ^ 2)
Syy = sum((y - mean(y)) ^ 2)
c(Sxy, Sxx, Syy)
beta_1_hat = Sxy / Sxx
beta_0_hat = mean(y) - beta_1_hat * mean(x)
c(beta_0_hat, beta_1_hat)
unique(cars$speed)
beta_0_hat + beta_1_hat * 8
cars
cars.head()
head(cars)
8 %in% unique(cars$speed)
21 %in% unique(cars$speed)
beta_0_hat + beta_1_hat * 21
# predict the stopping distance at 21 mph. 21 not in dataset.
beta_0_hat + beta_1_hat * 21
range(cars$speed)
range(cars$speed)[1] < 100 & 100 < range(cars$speed)[2]
beta_0_hat + beta_1_hat * 100
which(cars$speed == 8)
cars[5, ]
cars[which(cars$speed == 8), ]
16 - (beta_0_hat + beta_1_hat * 8)
y_hat = beta_0_hat + beta_1_hat * x
e     = y - y_hat
n     = length(e)
s2_e  = sum(e^2) / (n - 2)
s2_e
s_e = sqrt(s2_e)
s_e
SST   = sum((y - mean(y)) ^ 2)
SSReg = sum((y_hat - mean(y)) ^ 2)
SSE   = sum((y - y_hat) ^ 2)
c(SST = SST, SSReg = SSReg, SSE = SSE)
R2 = SSReg / SST
R2
stop_dist_model = lm(dist ~ speed, data = cars)
stop_dist_model
c(beta_0_hat, beta_1_hat)
plot(dist ~ speed, data = cars,
xlab = "Speed (in Miles Per Hour)",
ylab = "Stopping Distance (in Feet)",
main = "Stopping Distance vs Speed",
pch  = 20,
cex  = 2,
col  = "grey")
abline(stop_dist_model, lwd = 3, col = "darkorange")
names(stop_dist_model)
stop_dist_model$residuals
coef(stop_dist_model)
resid(stop_dist_model)
fitted(stop_dist_model)
summary(stop_dist_model)
names(summary(stop_dist_model))
summary(stop_dist_model)$r.squared
summary(stop_dist_model)$sigma
predict(stop_dist_model, newdata = data.frame(speed = 8))
predict(stop_dist_model, newdata = data.frame(speed = c(8, 21, 50)))
predict(stop_dist_model, newdata = cars)
predict(stop_dist_model)
fitted(stop_dist_model)
num_obs = 21
beta_0  = 5
beta_1  = -2
sigma   = 3
set.seed(1)
epsilon = rnorm(n = num_obs, mean = 0, sd = sigma)
x_vals = seq(from = 0, to = 10, length.out = num_obs)
y_vals = beta_0 + beta_1 * x_vals + epsilon
sim_fit = lm(y_vals ~ x_vals)
coef(sim_fit)
plot(y_vals ~ x_vals)
abline(sim_fit)
sim_slr = function(x, beta_0 = 10, beta_1 = 5, sigma = 1) {
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
set.seed(1)
sim_data = sim_slr(x = x_vals, beta_0 = 5, beta_1 = -2, sigma = 3)
head(sim_data)
sim_fit = lm(response ~ predictor, data = sim_data)
coef(sim_fit)
plot(response ~ predictor, data = sim_data,
xlab = "Simulated Predictor Variable",
ylab = "Simulated Response Variable",
main = "Simulated Regression Data",
pch  = 20,
cex  = 2,
col  = "grey")
abline(sim_fit, lwd = 3, lty = 1, col = "darkorange")
abline(beta_0, beta_1, lwd = 3, lty = 2, col = "dodgerblue")
legend("topright", c("Estimate", "Truth"), lty = c(1, 2), lwd = 2,
col = c("darkorange", "dodgerblue"))

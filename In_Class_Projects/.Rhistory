ames = read.csv('/Users/rileylatham/Downloads/SSC442/Lab_Working_Files/data/ames.csv')
library(tidyverse)
library(ggplot2)
library(scales)
# Read in the data set with headers TRUE
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
# Finds integer data - save to variable for indexing.
int_type = lapply(ameslist, class)
# Generates a dataframe from ames data with all integer type data
Ames = ameslist[int_type=='integer']
# Drop columns that don't have meaning
Ames$MSSubClass = NULL
# Drops the columns overallcond and overallqual
# Basically re-saving Ames as Ames without (!) these two columns, but keeping all rows.
Ames = Ames[ , !(names(Ames) %in% c('OverallCond', 'OverallQual'))]
# Drop NA's from our df
Ames = na.omit(Ames)
set.seed(9)
num_obs = nrow(Ames)
train_index = sample(num_obs, size = trunc(0.50 * num_obs))
train_data = Ames[train_index, ]
test_data = Ames[-train_index, ]
test_data<- test_data[-seq(nrow(test_data),nrow(test_data)-0),]
library(caret)
?knnreg
KNN_reg = knnreg(train_data, test_data, Fireplaces)
KNN_reg = knnreg(train_data, test_data, as.integer(Fireplaces))
typeof(Fireplaces)
KNN_reg = knnreg(train_data, test_data, as.integer(train_data$Fireplaces))
KNN_reg = knnreg(train_data, test_data, train_data$Fireplaces)
KNN_reg = knnreg(train_data, test_data, y=train_data$Fireplaces)
View(KNN_reg)
View(KNN_reg)
summary(KNN_reg)
library(class)
KNN_reg = knn(train_data, test_data, cl=train_data$Fireplaces)
summary(KNN_reg)
?knn
(trn_tab = table(predicted = KNN_reg, actual = test_data$Fireplaces))
KNN_reg_trn = knn(train_data, test_data, cl=train_data$Fireplaces)
KNN_reg_tst = knn(train_data, test_data, cl=test_data$Fireplaces)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
max(train_data$Fireplaces)
trn_con_mat
tst_con_mat
KNN_reg_trn = knnreg(train_data, test_data, y=train_data$Fireplaces)
KNN_reg_tst = knnreg(train_data, test_data, y=test_data$Fireplaces)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
train_data_vec <- as.data.frame(lapply(train_data, unlist))
typeof(train_data_vec)
typeof(train_data_vec[0])
typeof(train_data_vec['Fireplaces'])
KNN_reg_trn = knnreg(train_data_vec, test_data, y=train_data_vec$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data_vec$Fireplaces)
KNN_reg_trn = knnreg(train_data, test_data, y=train_data$Fireplaces)
KNN_reg_tst = knnreg(train_data, test_data, y=test_data$Fireplaces)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
KNN_reg_trn = knn(train_data, test_data, y=train_data$Fireplaces)
KNN_reg_tst = knn(train_data, test_data, y=test_data$Fireplaces)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
KNN_reg_trn = knn(train_data, test_data, cl=train_data$Fireplaces)
KNN_reg_tst = knn(train_data, test_data, cl=test_data$Fireplaces)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
KNN_reg_trn = knn(subset(train_data, select = c(14,10,4)),
subset(test_data, select = c(14,10,4)), cl=train_data$Fireplaces)
KNN_reg_trn = knn(subset(train_data, select = c(14,10,4)),
subset(test_data, select = c(14,10,4)), cl=train_data$Fireplaces)
KNN_reg_tst = knn(subset(train_data, select = c(14,10,4)),
subset(test_data, select = c(14,10,4)), cl=test_data$Fireplaces)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
y0 <- c(1., 2., 4., 3.)
sfun0  <- stepfun(1:3, y0, f = 0)
sfun.2 <- stepfun(1:3, y0, f = 0.2)
sfun1  <- stepfun(1:3, y0, f = 1)
sfun1c <- stepfun(1:3, y0, right = TRUE) # hence f=1
sfun0
summary(sfun0)
summary(sfun.2)
y0 <- c(1., 2., 4., 3., 5., 99.)
sfun0  <- stepfun(1:3, y0, f = 0)
sfun.2 <- stepfun(1:3, y0, f = 0.2)
sfun1  <- stepfun(1:3, y0, f = 1)
sfun1c <- stepfun(1:3, y0, right = TRUE) # hence f=1
sfun0
summary(sfun0)
summary(sfun.2)
y0 <- c(1., 2., 4., 3., 5., 99.)
sfun0  <- stepfun(1:5, y0, f = 0)
sfun.2 <- stepfun(1:5, y0, f = 0.2)
sfun1  <- stepfun(1:5, y0, f = 1)
sfun1c <- stepfun(1:5, y0, right = TRUE) # hence f=1
sfun0
summary(sfun0)
summary(sfun.2)
y0 <- c(1,2,4,3)
sfun0  <- stepfun(1:3, y0, f = 0)
sfun.2 <- stepfun(1:3, y0, f = .2)
sfun1  <- stepfun(1:3, y0, f = 1)
sfun0
summary(sfun0)
summary(sfun.2)
x0 <- seq(0.5,3.5, by = 0.25)
rbind(x=x0, f.f0 = sfun0(x0), f.f02= sfun.2(x0), f.f1 = sfun1(x0))
min_param_vec = c(2:34)
min_regress_vec = c()
# Loops over our parameters until we have a specified amount left.
while (length(min_param_vec)>15){
# Grabs our parameter of interest
for (parameter in min_param_vec){
lm.fit.norm = lm(train_data$SalePrice ~ ., data=subset(train_data,
select = union(c(parameter), min_regress_vec)))
min_RMSE_norm = rmse(test_data$SalePrice, predict(lm.fit.norm, newdata=test_data))
if (min_RMSE_norm < MIN){
MIN = min_RMSE_norm
print(MIN)
min_r_param = colnames(train_data[c(parameter)])
}
}
min_param_vec = min_param_vec[min_param_vec!=grep(min_r_param, colnames(train_data))]
min_regress_vec = append(min_regress_vec, grep(min_r_param, colnames(train_data)))
print('Added Regressor')
}
rmse = function(actual, predicted) {
sqrt(mean((actual - predicted) ^ 2))
}
# Complexity function
get_complexity = function(model) {
length(coef(model)) - 1
}
min_param_vec = c(2:34)
min_regress_vec = c()
# Loops over our parameters until we have a specified amount left.
while (length(min_param_vec)>15){
# Grabs our parameter of interest
for (parameter in min_param_vec){
lm.fit.norm = lm(train_data$SalePrice ~ ., data=subset(train_data,
select = union(c(parameter), min_regress_vec)))
min_RMSE_norm = rmse(test_data$SalePrice, predict(lm.fit.norm, newdata=test_data))
if (min_RMSE_norm < MIN){
MIN = min_RMSE_norm
print(MIN)
min_r_param = colnames(train_data[c(parameter)])
}
}
min_param_vec = min_param_vec[min_param_vec!=grep(min_r_param, colnames(train_data))]
min_regress_vec = append(min_regress_vec, grep(min_r_param, colnames(train_data)))
print('Added Regressor')
}
min_param_vec = c(2:34)
min_regress_vec = c()
MIN = Inf
min_r_param = NULL
min_r_param_int = NULL
# Loops over our parameters until we have a specified amount left.
while (length(min_param_vec)>15){
# Grabs our parameter of interest
for (parameter in min_param_vec){
lm.fit.norm = lm(train_data$SalePrice ~ ., data=subset(train_data,
select = union(c(parameter), min_regress_vec)))
min_RMSE_norm = rmse(test_data$SalePrice, predict(lm.fit.norm, newdata=test_data))
if (min_RMSE_norm < MIN){
MIN = min_RMSE_norm
print(MIN)
min_r_param = colnames(train_data[c(parameter)])
}
}
min_param_vec = min_param_vec[min_param_vec!=grep(min_r_param, colnames(train_data))]
min_regress_vec = append(min_regress_vec, grep(min_r_param, colnames(train_data)))
print('Added Regressor')
}
print(min_regress_vec)
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15,5,22,6,30,26,16,18,29,32,34)),
subset(test_data, select = c(14,4,24,20,15,5,22,6,30,26,16,18,29,32,34)), cl=train_data$Fireplaces)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15,5,22,6,30,26,16,18,29,32,34)),
subset(test_data, select = c(14,4,24,20,15,5,22,6,30,26,16,18,29,32,34)), cl=test_data$Fireplaces)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
?stepfun
y0 <- c(0,1,2,3)
sfun0  <- stepfun(1:3, y0, f = 0)
sfun.2 <- stepfun(1:3, y0, f = .2)
sfun1  <- stepfun(1:3, y0, f = 1)
sfun0
summary(sfun0)
summary(sfun.2)
x0 <- subset(train_data, select=c(14,10,4)
rbind(x=x0, f.f0 = sfun0(x0), f.f02= sfun.2(x0), f.f1 = sfun1(x0))
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15)),
subset(test_data, select = c(14,4,24,20,15)), cl=train_data$Fireplaces)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15)),
subset(test_data, select = c(14,4,24,20,15)), cl=test_data$Fireplaces)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
step(glm(Fireplaces~1, family=binomial, train_data), scope= ~train_data)
?step
step(lm(train_data$Fireplaces, train_data), scope= ~train_data)
step(lm(train_data$Fireplaces~., train_data), scope= ~train_data)
step(lm(train_data$Fireplaces~., train_data), scope= ~train_data, direction='forward')
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=train_data$Fireplaces)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=test_data$Fireplaces)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=train_data$Fireplaces,
k=20)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=test_data$Fireplaces,
k=20)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=train_data$Fireplaces,
k=25)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=test_data$Fireplaces,
k=25)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=train_data$Fireplaces,
k=50)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=test_data$Fireplaces,
k=50)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=train_data$Fireplaces,
k=75)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=test_data$Fireplaces,
k=75)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=train_data$Fireplaces,
k=60)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=test_data$Fireplaces,
k=60)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
plot(KNN_reg_trn, type="b", xlab="K- Value",ylab="Accuracy level")
plot(KNN_reg_tst, type="b", xlab="Prediction", ylab="Count")
tst_tab = table(predicted = KNN_reg_trn, actual = test_data$Fireplaces)
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=train_data$Fireplaces,
k=60)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=test_data$Fireplaces,
k=60)
tst_tab = table(predicted = KNN_reg_trn, actual = test_data$Fireplaces)
trn_tab = table(predicted = KNN_reg_trn, actual = train_data$Fireplaces)
trn_con_mat  = confusionMatrix(trn_tab, positive = "Yes")
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
plot(KNN_reg_trn, type="b", xlab="Prediction", ylab="Count")
library(tidyverse)
library(ggplot2)
library(scales)
library(caret)
library(class)
# Read in the data set with headers TRUE
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
# Finds integer data - save to variable for indexing.
int_type = lapply(ameslist, class)
# Generates a dataframe from ames data with all integer type data
Ames = ameslist[int_type=='integer']
# Drop columns that don't have meaning
Ames$MSSubClass = NULL
# Drops the columns overallcond and overallqual
# Basically re-saving Ames as Ames without (!) these two columns, but keeping all rows.
Ames = Ames[ , !(names(Ames) %in% c('OverallCond', 'OverallQual'))]
# Drop NA's from our df
Ames = na.omit(Ames)
# Split our testing and training data
set.seed(9)
num_obs = nrow(Ames)
train_index = sample(num_obs, size = trunc(0.50 * num_obs))
train_data = Ames[train_index, ]
test_data = Ames[-train_index, ]
test_data<- test_data[-seq(nrow(test_data),nrow(test_data)-0),]
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=train_data$Fireplaces,
k=60)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=test_data$Fireplaces,
k=60)
tst_tab = table(predicted = KNN_reg_trn, actual = test_data$Fireplaces)
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
trn_con_mat
tst_con_mat
plot(KNN_reg_trn, type="b", xlab="Prediction", ylab="Count")
KNN_reg_trn = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=train_data$Fireplaces,
k=60)
KNN_reg_tst = knn(subset(train_data, select = c(14,4,24,20,15,10)),
subset(test_data, select = c(14,4,24,20,15,10)), cl=test_data$Fireplaces,
k=60)
tst_tab = table(predicted = KNN_reg_tst, actual = test_data$Fireplaces)
tst_con_mat = confusionMatrix(tst_tab, positive = "Yes")
tst_con_mat
plot(KNN_reg_trn, type="b", xlab="Prediction", ylab="Count")
setwd('/Users/rileylatham/Downloads/SSC442/In_Class_Projects')
library(tidyverse)
library(ggplot2)
library(scales)
library(caret)
library(class)
# Read in the data set with headers TRUE
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
# Finds integer data - save to variable for indexing.
int_type = lapply(ameslist, class)
# Generates a dataframe from ames data with all integer type data
Ames = ameslist[int_type=='integer']
# Drop columns that don't have meaning
Ames$MSSubClass = NULL
# Drop NA's from our df
Ames = na.omit(Ames)
# Split our testing and training data
set.seed(9)
num_obs = nrow(Ames)
train_index = sample(num_obs, size = trunc(0.50 * num_obs))
train_data = Ames[train_index, ]
test_data = Ames[-train_index, ]
test_data<- test_data[-seq(nrow(test_data),nrow(test_data)-0),]
library(aod)
installed.packages('aod')
?glm()
Ames$Fireplaces_Bin <- ifelse(Ames$`Ames$Fireplaces` > 0, 1, 0)
Ames$Fireplaces_Bin
Ames$Fireplaces_Bin = NULL
Ames$Fireplaces_Bin <- ifelse(Ames$`Ames$Fireplaces` > 0, 1, 0)
Ames$Fireplaces_Bin <- ifelse(Ames$Fireplaces > 0, 1, 0)
View(Ames)
glm(family=quasibinomial(link = logit))
glm(Ames$Fireplaces_Bin~ .,
family=binomial(link = 'logit'), data=Ames)
summary(logit_mod)
logit_mod = glm(Ames$Fireplaces_Bin~ .,
family=binomial(link = 'logit'), data=Ames)
summary(logit_mod)
logit_mod = glm(formula = Ames$Fireplaces_Bin~ .,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = Ames$Fireplaces_Bin~ .,
family=binomial(), data=train_data)
Ames$Fireplaces_Bin = NULL
Ames$Fireplaces_Bin <- ifelse(Ames$Fireplaces > 0, 1, 0)
# Split our testing and training data
set.seed(9)
num_obs = nrow(Ames)
train_index = sample(num_obs, size = trunc(0.50 * num_obs))
train_data = Ames[train_index, ]
test_data = Ames[-train_index, ]
test_data<- test_data[-seq(nrow(test_data),nrow(test_data)-0),]
# Creates Binary Class
logit_mod = glm(formula = $Fireplaces_Bin~ .,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = train_data$Fireplaces_Bin~ .,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = train_data$Fireplaces_Bin~
subset(train_data, select = c(14,4,24,20,15,10)),
family=binomial(), data=train_data)
logit_mod = glm(formula = train_data$Fireplaces_Bin~subset(train_data,
select = c(14,4,24,20,15,10)),
family=binomial(), data=train_data)
logit_mod = glm(formula = train_data$Fireplaces_Bin~.,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = Fireplaces_Bin~.,
family=binomial(), data=train_data)
summary(logit_mod)
View(train_data)
logit_mod = glm(formula = Fireplaces_Bin~LotArea, OverallQual, OverallCond,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = Fireplaces_Bin~LotArea+OverallQual+OverallCond,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = Fireplaces_Bin~LotArea+OverallQual+OverallCond+YearRemodAdd+
GrLivArea+WoodDeckSF,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = Fireplaces_Bin~LotArea+OverallQual+OverallCond+YearRemodAdd+
GrLivArea,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = Fireplaces_Bin~LotArea+OverallQual+OverallCond+YearRemodAdd,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = Fireplaces_Bin~LotArea+OverallQual+OverallCond+YearRemodAdd+
GrLivArea,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = Fireplaces_Bin~LotArea+OverallCond+YearRemodAdd+
GrLivArea,
family=binomial(), data=train_data)
summary(logit_mod)
logit_mod = glm(formula = Fireplaces_Bin~LotArea+OverallQual+OverallCond+YearRemodAdd+
GrLivArea,
family=binomial(), data=train_data)
summary(logit_mod)
step(glm(Fireplaces_Bin~1, family = binomial, train_data),
scope=~., direction = 'forward')
step(glm(Fireplaces_Bin~1, family = binomial, train_data),
scope=~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea, direction = 'forward')
step(glm(Fireplaces_Bin~1, family = binomial, train_data),
scope=~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea+
WoodDeckSF+GarageArea+X2ndFlrSF, direction = 'forward')
step(glm(Fireplaces_Bin~1, family = binomial, train_data),
scope=~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea+
WoodDeckSF+GarageArea+X2ndFlrSF, direction = 'both')
step(glm(Fireplaces_Bin~1, family = binomial, train_data),
scope=~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea+
WoodDeckSF+GarageArea+X2ndFlrSF, direction = 'forward')
step(glm(Fireplaces_Bin~1, family = binomial, train_data),
scope=~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea+
WoodDeckSF+GarageArea+X2ndFlrSF+YearBuilt+YearRemodAdd+
MasVnrArea, direction = 'forward')
step(glm(Fireplaces_Bin~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea+
WoodDeckSF+GarageArea+X2ndFlrSF+YearBuilt+YearRemodAdd+
MasVnrArea, family = binomial, train_data),
scope=~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea+
WoodDeckSF+GarageArea+X2ndFlrSF+YearBuilt+YearRemodAdd+
MasVnrArea, direction = 'both')
step(glm(Fireplaces_Bin~1),
scope=~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea+
WoodDeckSF+GarageArea+X2ndFlrSF+YearRemodAdd+
MasVnrArea, direction = 'forward')
step(glm(Fireplaces_Bin~1, data=train_data),
scope=~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea+
WoodDeckSF+GarageArea+X2ndFlrSF+YearRemodAdd+
MasVnrArea, direction = 'forward')
step(glm(Fireplaces_Bin~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea+
WoodDeckSF+GarageArea+X2ndFlrSF+YearRemodAdd+
MasVnrArea, data=train_data),
scope=~OverallCond+OverallQual+YearRemodAdd+GrLivArea+LotArea+
WoodDeckSF+GarageArea+X2ndFlrSF+YearRemodAdd+
MasVnrArea, direction = 'both')
installed.packages('effects')
install.packages("effects")
library(effects)
install.packages('nloptr')
